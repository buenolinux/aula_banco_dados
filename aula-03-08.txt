CREATE DATABASE loja;

USE loja;

CREATE TABLE tab_vendedores(
	id_vendedor INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	nome VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL
);

CREATE TABLE tab_vendas(
	id_venda INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	id_vendedor INT NOT NULL,
	data DATE NOT NULL,
	valor DECIMAL(10,2) NOT NULL,
	CONSTRAINT fk_id_vendedor FOREIGN KEY (id_vendedor) REFERENCES tab_vendedores(id_vendedor)
);

INSERT INTO tab_vendedores(nome, email)
values
('Carlos', 'carlos@gmail.com'), 
('Maria', 'maria@uol.com.br'),
('Simone', 'simone@uol.com.br'),
('Sérgio', 'sergio@gmail.com');

INSERT INTO tab_vendas(id_vendedor, data, valor)
values
(1, '2018-08-06', 150.00),
(1, '2018-08-06', 600.00),
(2, '2018-08-06', 250.00),
(1, '2018-08-06', 980.00),
(2, '2018-08-06', 1100.00),
(2, '2018-08-06', 190.00),
(1, '2018-08-07', 360.00),
(3, '2018-08-07', 450.00),
(1, '2018-08-07', 100.00),
(4, '2018-08-08', 990.00),
(1, '2018-08-08', 60.00),
(1, '2018-08-08', 10.00),
(1, '2018-08-08', 170.00),
(3, '2018-08-09', 650.00),
(2, '2018-08-09', 950.00),
(3, '2018-08-09', 650.00),
(1, '2018-08-10', 100.00),
(3, '2018-08-10', 4450.00),
(4, '2018-08-10', 1150.00),
(4, '2018-08-10', 2000.00);


-- ************************************************************
-- GROUP BY
-- ************************************************************

-- Mostrar qtde de vendas de cada vendedor e seu nome (Sem inner join)
SELECT tab_vendas.id_vendedor, 
	   tab_vendedores.nome,
       COUNT(tab_vendas.valor) AS 'Quantidade de vendas'
FROM tab_vendas, tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome;




-- Mostrar qtde de vendas de cada vendedor e seu nome (Com inner join)
SELECT tab_vendas.id_vendedor, 
	   tab_vendedores.nome,
       COUNT(tab_vendas.valor) AS 'Quantidade de vendas'
FROM tab_vendas
INNER JOIN tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome;




-- Mostrar o total vendido por vendedor
SELECT tab_vendas.id_vendedor, SUM(tab_vendas.valor) AS Total
FROM tab_vendas
GROUP BY tab_vendas.id_vendedor;






-- Mostrar o total vendido por vendedor e seu nome (Sem o Inner join)
SELECT tab_vendas.id_vendedor AS 'Código',
	   tab_vendedores.nome AS Nome,
       SUM(tab_vendas.valor) AS 'Total'
FROM tab_vendas, tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome;









-- Mostrar o total vendido por vendedor e seu nome (Com Inner join)
SELECT tab_vendas.id_vendedor AS 'Código',
	   tab_vendedores.nome AS Nome,
       SUM(tab_vendas.valor) AS 'Total'
FROM tab_vendas
INNER JOIN tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome;





-- *************************************************
-- Usando o Having
-- *************************************************


-- Determina uma condição de busca para um grupo ou um conjunto 
-- de registros,  definindo critérios para limitar os resultados -- 
-- obtidos a partir do agrupamento de registros.
-- Só pode ser usada em parceria com o GROUP BY

-- Mostrar o total vendido por vendedor maior ou igual a 4000 
-- e seu nome (Sem o inner join)
SELECT tab_vendas.id_vendedor AS 'Código',
	   tab_vendedores.nome AS Vendedor,
       SUM(tab_vendas.valor) AS Total
FROM tab_vendas, tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome
HAVING SUM(tab_vendas.valor) >= 4000;







-- Mostrar o total vendido por vendedor maior ou igual a 4000 
-- e seu nome (Com inner join)
SELECT tab_vendas.id_vendedor AS 'Código',
	   tab_vendedores.nome AS Vendedor,
       SUM(tab_vendas.valor) AS Total
FROM tab_vendas
INNER JOIN tab_vendedores
WHERE tab_vendas.id_vendedor = tab_vendedores.id_vendedor
GROUP BY tab_vendas.id_vendedor, tab_vendedores.nome
HAVING SUM(tab_vendas.valor) >= 4000;




