USE escola;
-- Criar uma SP para mostrar fone e email de todos 
-- os professores
CREATE PROCEDURE spMostraFoneEmailProfessores
AS
SELECT fone, email FROM tab_professores;

EXECUTE spMostraFoneEmailProfessores;



-- Criar uma SP para aumentar o salario de todos 
-- os professores com qualquer porcentagem
CREATE PROCEDURE spAumentoSalarial
@valor DECIMAL(10,2)
AS
UPDATE tab_professores 
SET salario = salario * @valor;

SELECT * FROM tab_professores;
EXECUTE spAumentoSalarial 1.10;
SELECT * FROM tab_professores;



-- Criar uma SP para aumentar o salario de um professor 
-- específico com qualquer porcentagem
CREATE PROCEDURE spAumentoSalarialIndividual
@valor DECIMAL(10,2), @id INT
AS
UPDATE tab_professores
SET salario = salario * @valor
WHERE id_professor = @id;

SELECT * FROM tab_professores;
EXECUTE spAumentoSalarialIndividual 1.10, 1;
SELECT * FROM tab_professores;


-- Criar uma SP para mostrar a soma de todos os 
-- salários dos professores
CREATE PROCEDURE spSomaSalarios
AS
SELECT SUM(salario) AS Total
FROM tab_professores;

EXECUTE spSomaSalarios;




-- Criar uma SP para contar quantos alunos existem em
-- uma determinada turma
CREATE PROCEDURE spContaAlunoTurma
@turma VARCHAR(50)
AS
SELECT COUNT(nome) AS 'Total de alunos' FROM tab_turmas
WHERE nome = @turma;

EXECUTE spContaAlunoTurma 'SQL';






-- Criar uma SP para inserir alunos
CREATE PROCEDURE spInsereAluno
@nome VARCHAR(50), @email VARCHAR(50), 
@fone VARCHAR(15), @foto VARCHAR(50)
AS
INSERT INTO tab_alunos(nome, email, fone, foto)
VALUES(@nome, @email, @fone, @foto);

SELECT * FROM tab_alunos;
EXECUTE spInsereAluno 'Zeca', 'zeca@gmail.com', '(11) 91212-1212', 'zeca.jpg';
SELECT * FROM tab_alunos;






-- Criar uma SP para alterar dados de um aluno
CREATE PROCEDURE spAtualizaAluno
@nome VARCHAR(50), @email VARCHAR(50), 
@fone VARCHAR(15), @foto VARCHAR(50), @id INT
AS
UPDATE tab_alunos SET nome = @nome, email = @email, 
					  fone = @fone, foto = @foto
WHERE id_aluno = @id;

SELECT * FROM tab_alunos;
EXECUTE spAtualizaAluno 'Zeca Pagodinho', 'zeca@gmail.com', '(11) 97878-7878', 'zeca.jpg', 11;
SELECT * FROM tab_alunos;

EXECUTE spMostraFoneEmailProfessores;






-- Alterar a SP spMostraFoneEmailProfessores para mostrar tb o nome do professor
ALTER PROCEDURE spMostraFoneEmailProfessores
AS
SELECT nome, fone, email from tab_professores;

EXECUTE spMostraFoneEmailProfessores;






-- Trigger é como uma função que é disparada mediante alguma ação. 
-- Geralmente essas ações que disparam os triggers são alterações 
-- nas tabelas por meio de operações de inserção, exclusão e 
-- atualização de dados (insert, delete e update).

-- Vamos a um exemplo prático, criaremos um controle de fluxo de 
-- caixa de uma loja, onde a cada venda inserida na tabela de 
-- vendas, será automaticamente atualizada na tabela de caixa, 
-- o mesmo acontecerá quando removermos a venda.

CREATE DATABASE fluxocaixa;
USE fluxocaixa;
CREATE TABLE tab_caixa(
	id_caixa INT NOT NULL PRIMARY KEY IDENTITY,
	data DATE NOT NULL,
	saldo_inicial DECIMAL(10,2) NOT NULL,
	saldo_final DECIMAL(10,2) NOT NULL
);

CREATE TABLE tab_vendas(
	id_venda INT NOT NULL PRIMARY KEY IDENTITY,
	data DATE NOT NULL,
	valor DECIMAL(10,2) not null
);

INSERT INTO tab_caixa(data, saldo_inicial, saldo_final)
VALUES
('2022-08-02', 100, 100);